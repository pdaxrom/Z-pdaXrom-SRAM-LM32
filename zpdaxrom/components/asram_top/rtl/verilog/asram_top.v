//   ==================================================================
//   >>>>>>>>>>>>>>>>>>>>>>> COPYRIGHT NOTICE <<<<<<<<<<<<<<<<<<<<<<<<<
//   ------------------------------------------------------------------
//   Copyright (c) 2006-2011 by Lattice Semiconductor Corporation
//   ALL RIGHTS RESERVED 
//   ------------------------------------------------------------------
//
//   IMPORTANT: THIS FILE IS AUTO-GENERATED BY THE LATTICEMICO SYSTEM.
//
//   Permission:
//
//      Lattice Semiconductor grants permission to use this code
//      pursuant to the terms of the Lattice Semiconductor Corporation
//      Open Source License Agreement.  
//
//   Disclaimer:
//
//      Lattice Semiconductor provides no warranty regarding the use or
//      functionality of this code. It is the user's responsibility to
//      verify the user’s design for consistency and functionality through
//      the use of formal verification methods.
//
//   --------------------------------------------------------------------
//
//                  Lattice Semiconductor Corporation
//                  5555 NE Moore Court
//                  Hillsboro, OR 97214
//                  U.S.A
//
//                  TEL: 1-800-Lattice (USA and Canada)
//                         503-286-8001 (other locations)
//
//                  web: http://www.latticesemi.com/
//                  email: techsupport@latticesemi.com
//
//   --------------------------------------------------------------------
//                        FILE DETAILS
// Project          : Async SRAM Controller
// File             : asram_core.v
// Title            : Asynchronous SRAM Controller
// Dependencies     : asram_params.v
// Description      : Implements the logic to interface async SRAM with Wishbone
//                    bus.
// =============================================================================
//                        REVISION HISTORY
// Version          : 7.0
// Mod. Date        : Jun 27, 2005
// Changes Made     : Initial Creation
//
// Version          : 7.0SP2, 3.0
// Mod. Date        : 
// Changes Made     : No change for SP2
// =============================================================================
`ifndef ASRAM_TOP_FILE
`define ASRAM_TOP_FILE
`include "system_conf.v"

module asram_top
  #(parameter ASRAM_WB_DAT_WIDTH = 32,
    parameter SRAM_DATA_WIDTH    = 32,
    parameter SRAM_ADDR_WIDTH    = 18,
    parameter SRAM_BE_WIDTH      = 4,
    parameter READ_LATENCY       = 1,
    parameter WRITE_LATENCY      = 1,
    parameter DATA_OUTPUT_REG    = 0
    )
   (
    // Clock and reset
    input clk_i,
    input rst_i,
    
    // Wishbone side interface
    input [2:0] ASRAM_CTI_I,
    input [1:0] ASRAM_BTE_I,
    input [31:0] ASRAM_ADR_I,
    input [ASRAM_WB_DAT_WIDTH-1:0] ASRAM_DAT_I,
    input [ASRAM_WB_DAT_WIDTH/8-1:0] ASRAM_SEL_I,
    input ASRAM_WE_I,
    input ASRAM_STB_I,
    input ASRAM_CYC_I,
    input ASRAM_LOCK_I,
    output ASRAM_ACK_O,
    output [ASRAM_WB_DAT_WIDTH-1:0] ASRAM_DAT_O,
    output ASRAM_ERR_O,
    output ASRAM_RTY_O,
    
    // SRAM side interface
    input [SRAM_DATA_WIDTH-1:0] sram_data_in,
    output [SRAM_ADDR_WIDTH-1:0] sram_addr,
    output [SRAM_DATA_WIDTH-1:0] sram_data_out,
    output sram_csn,
    output [SRAM_BE_WIDTH-1:0] sram_be,
    output sram_wen,
    output sram_oen
    );
   
   assign ASRAM_ERR_O = 1'b0;
   assign ASRAM_RTY_O = 1'b0;
   
   asram_core
     #(.WB_DAT_WIDTH    (ASRAM_WB_DAT_WIDTH),
       .SRAM_DATA_WIDTH (SRAM_DATA_WIDTH),
       .SRAM_ADDR_WIDTH (SRAM_ADDR_WIDTH),
       .SRAM_BE_WIDTH   (SRAM_BE_WIDTH),
       .READ_LATENCY    (READ_LATENCY),
       .WRITE_LATENCY   (WRITE_LATENCY),
       .DATA_OUTPUT_REG (DATA_OUTPUT_REG)
       )
   core_inst
     (.clk_i            (clk_i),
      .rst_i            (rst_i),
      .cti_i            (ASRAM_CTI_I),
      .bte_i            (ASRAM_BTE_I),
      .addr_i           (ASRAM_ADR_I),
      .dat_i            (ASRAM_DAT_I),
      .sel_i            (ASRAM_SEL_I),
      .we_i             (ASRAM_WE_I),
      .stb_i            (ASRAM_STB_I),
      .cyc_i            (ASRAM_CYC_I),
      .ack_o            (ASRAM_ACK_O),
      .dat_o            (ASRAM_DAT_O),
      .sram_addr        (sram_addr),
      .sram_data_in     (sram_data_in),
      .sram_data_out    (sram_data_out),
      .sram_csn         (sram_csn),
      .sram_be          (sram_be),
      .sram_wen         (sram_wen),
      .sram_oen         (sram_oen));
   
   wire [SRAM_DATA_WIDTH-1: 0] zwire;
   generate
      genvar 		       i;
      for ( i = 0 ; i < SRAM_DATA_WIDTH; i = i + 1)
	begin : zwa
	   assign zwire[i] = 1'bz;
	end
   endgenerate
   
endmodule
`endif // ASRAM_TOP_FILE
